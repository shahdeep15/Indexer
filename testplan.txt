Deep Shah
Shashank Seeram
Testplan for indexer

The following are the targets in the Makefile that test for various testcases:

alldir: lib exec rundir
	This target executes the program on the testdir directory provided. This directory has nested directories, files at every level, empty files, and separators that are to be operated on. When tested the output comes out exactly as expected, without errors for empty files, and without separator characters being included in the tokens. Also the files being read must be .txt files, and if they have a ~ at the end of them they will be skipped, as those are temporary files created and used by the system or editing program. The . and .. directories are also ignored.

allfile: lib exec runfile
	This target runs the program on just one file, test.txt, which is included, and tests for various separator character possibilities (most of them from the Keyboard) and shows what happens when you have alphanumeric tokens and uppercase letters. The letters all become lowercase and numbers are placed before letters in lexicographical order.

allsameio: lib exec runsameio
	This target executes the program while having the same input file and output file, sameio.txt. The program asks if the user is sure he/she wants to overwrite the file and the proper action is taken (continuing/exit with error). The program requires that the output file EXPLICITLY have a ".txt" extension, and an error will be returned if it is run without one. This is to prevent outputting to a file whose type you have no clue about. Also, there is no check for if the output file is located amongst the input files of an input directory, for if the user EXPLICITLY gives the path to a file in the input directory it is assumed the user wants that file overwritten. Providing a path to an output file in your input directory is not something that a user can do simply by accident. There must be an intention to do so, and so the proper action, in our program's case, is to simply overwrite it.

alllong: lib exec runlong
	This target runs the program on a file called long.txt that is relatively large (~3,800 words, ~22,000 characters, Copied the first 3 chapters of a Short Story, "A Tale of Friendship"). It runs exactly as expected and with very little running time. We tested another large file at 150,000 characters (a large wikipedia page in plain text) that ran quicly and with no crashes. A ten-fold increase in character count did not make a dent in the running time, so to test the limits, we doubled it to 300,000 characters and the same held. With absolutely massive files (millions of characters) we are pretty certain there would not be any lag greater than a second or two in the running time, until the file obviously becomes astronomical in size or there are many files of a huge size.
